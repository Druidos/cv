diff --git a/bridge/bridge/populate.py b/bridge/bridge/populate.py
index bf6f963..f27956c 100644
--- a/bridge/bridge/populate.py
+++ b/bridge/bridge/populate.py
@@ -25,7 +25,7 @@ from django.core.exceptions import ObjectDoesNotExist
 from django.db.models import Q
 from django.utils.translation import override, ungettext_lazy

-from bridge.vars import JOB_CLASSES, SCHEDULER_TYPE, USER_ROLES, JOB_ROLES
+from bridge.vars import JOB_CLASSES, SCHEDULER_TYPE, USER_ROLES, JOB_ROLES, JOB_DESCS
 from bridge.utils import file_get_or_create, unique_id, BridgeException

 import marks.SafeUtils as SafeUtils
@@ -80,7 +80,7 @@ class Population:
         self.__populate_functions()
         if len(Job.objects.filter(parent=None)) < len(JOB_CLASSES):
             self.__populate_jobs()
-        self.__populate_default_jobs()
+        #self.__populate_default_jobs()
         self.__populate_unknown_marks()
         self.__populate_tags()
         self.__populate_unsafe_marks()
@@ -192,7 +192,7 @@ class Population:
                         cnt += 1
                         args['name'] = "%s #%s" % (JOB_CLASSES[i][1], cnt)

-                    args['description'] = "<h3>%s</h3>" % JOB_CLASSES[i][1]
+                    args['description'] = "<h3>%s</h3>" % JOB_DESCS[i][1]
                     args['type'] = JOB_CLASSES[i][0]
                     create_job(args)
                     self.changes['jobs'] = True
diff --git a/bridge/bridge/vars.py b/bridge/bridge/vars.py
index 5c9fac2..7933fa5 100644
--- a/bridge/bridge/vars.py
+++ b/bridge/bridge/vars.py
@@ -51,8 +51,11 @@ USER_ROLES = (
 )

 JOB_CLASSES = (
-    ('0', _('Verification of Linux kernel modules')),
-    ('3', _('Validation on commits in Linux kernel Git repositories')),
+    ('0', _('Root')),
+)
+
+JOB_DESCS = (
+    ('0', _('Root report')),
 )

 # If you change it change values also in comparison.html
@@ -190,7 +193,6 @@ TASK_STATUS = (

 MARKS_COMPARE_ATTRS = {
     JOB_CLASSES[0][0]: ['Rule specification', 'Verification object'],
-    JOB_CLASSES[1][0]: ['Rule specification', 'Verification object'],
 }


diff --git a/bridge/jobs/ViewJobData.py b/bridge/jobs/ViewJobData.py
index 55470e0..908dee2 100644
--- a/bridge/jobs/ViewJobData.py
+++ b/bridge/jobs/ViewJobData.py
@@ -136,9 +136,12 @@ class ViewJobData:
         instances = {}
         for c_name, total, in_progress in ComponentInstances.objects.filter(report=self.report)\
                 .order_by('component__name').values_list('component__name', 'total', 'in_progress'):
-            instances[c_name] = ' (%s/%s)' % (total - in_progress, total)
+            instances[c_name] = str(total)

         res_data = {}
+        cpu_time = {}
+        memory = {}
+        wall_time = {}
         resource_filters = {}

         if 'resource_component' in self.view:
@@ -147,25 +150,25 @@ class ViewJobData:

         for cr in self.report.resources_cache.filter(~Q(component=None) & Q(**resource_filters))\
                 .select_related('component'):
-            if cr.component.name not in res_data:
-                res_data[cr.component.name] = {}
+            if cr.component.name not in cpu_time:
+                cpu_time[cr.component.name] = {}
+                memory[cr.component.name] = {}
+                wall_time[cr.component.name] = {}
             rd = get_resource_data(self.user.extended.data_format, self.user.extended.accuracy, cr)
-            res_data[cr.component.name] = "%s %s %s" % (rd[0], rd[1], rd[2])

-        resource_data = [
-            {'component': x, 'val': res_data[x], 'instances': instances.get(x, '')} for x in sorted(res_data)
-        ]
-        resource_data.extend(list(
-            {'component': x, 'val': '-', 'instances': instances[x]} for x in sorted(instances) if x not in res_data
-        ))
+            wall_time[cr.component.name] = rd[0]
+            cpu_time[cr.component.name] = rd[1]
+            memory[cr.component.name] = rd[2]

+        resource_data = [{'component': x, 'instances': instances[x], 'cpu': cpu_time[x], 'mem': memory[x], 'wall': wall_time[x]} for x in sorted(cpu_time)]
+
+        '''
         if 'hidden' not in self.view or 'resource_total' not in self.view['hidden']:
             res_total = self.report.resources_cache.filter(component=None).first()
             if res_total is not None:
                 rd = get_resource_data(self.user.extended.data_format, self.user.extended.accuracy, res_total)
-                resource_data.append({
-                    'component': _('Total'), 'val': "%s %s %s" % (rd[0], rd[1], rd[2]), 'instances': ''
-                })
+                resource_data.append({'component': _('Total'), 'cpu': rd[1], 'mem': rd[2], 'wall': '-'})
+        '''
         return resource_data

     def __unknowns_info(self):
diff --git a/bridge/jobs/templates/jobs/jobData.html b/bridge/jobs/templates/jobs/jobData.html
index 2752c2a..eb71ab2 100644
--- a/bridge/jobs/templates/jobs/jobData.html
+++ b/bridge/jobs/templates/jobs/jobData.html
@@ -116,22 +116,35 @@
         <div class="ui nine wide column">
             {% if reportdata.data.resources|length %}
                 <h4 class="header ui violet">{% trans 'Consumed resources' %}
-                    <i id="resources-note" class="ui blue help icon" data-content="{% trans "Component (Finished instances/Total instances): Wall time, CPU time and maximum memory size" %}"></i>
                 </h4>
+                <table border="1">
                 <div class="ui list">
+                    <tr bgcolor="#d3d3d3">
+                        <td align="left">Component</td>
+                        <td align="center">Instances</td>
+                        <td align="center">CPU time</td>
+                        <td align="center">Memory</td>
+                        <td align="center">Wall time</td>
+                    </tr>
                     {% for res_data in reportdata.data.resources %}
                         <div class="item">
-                            <i class="laptop mini icon"></i>
                             <div class="content">
+                            <tr>
                                 {% if reportdata.report.component.name == res_data.component %}
-                                    <strong style="color: #86188c;">{{ res_data.component }}{{ res_data.instances }}:</strong>
+                                    <td><strong style="color: #86188c;">{{ res_data.component }}</strong></td>
                                 {% else %}
-                                    {{ res_data.component }}{{ res_data.instances }}:
-                                {% endif %}<span style="color: darkblue">{{ res_data.val }}</span>
+                                    <td>{{ res_data.component }}</td>
+                                {% endif %}
+                                <td align="center"><span style="color: darkblue">{{ res_data.instances }}</span></td>
+                                <td align="right"><span style="color: darkblue"> <strong>{{ res_data.cpu }}</strong></span></td>
+                                <td align="right"><span style="color: darkblue"> {{ res_data.mem }}</span></td>
+                                <td align="right"><span style="color: darkblue"> {{ res_data.wall }}</span></td>
+                            </tr>
                             </div>
                         </div>
                     {% endfor %}
                 </div>
+                </table>
             {% endif %}
             {% if reportdata.data.compinst|length %}
                 <h4 class="header ui violet">{% trans 'Instances of components' %}</h4>
diff --git a/bridge/jobs/utils.py b/bridge/jobs/utils.py
index 0eb6fa1..14a96b8 100644
--- a/bridge/jobs/utils.py
+++ b/bridge/jobs/utils.py
@@ -755,7 +763,24 @@ def check_new_parent(job, parent):
 def get_resource_data(data_format, accuracy, resource):
     if data_format == 'hum':
         wall = convert_time(resource.wall_time, accuracy)
-        cpu = convert_time(resource.cpu_time, accuracy)
+        # Make big numbers look actually human readable.
+        cpu_time_in_seconds = round(resource.cpu_time / 1000)
+        cpu_time_human_readable = ""
+        if cpu_time_in_seconds == 0:
+            cpu_time_human_readable = "0"
+        while cpu_time_in_seconds > 0:
+            # Add thousand separator.
+            three_digits = cpu_time_in_seconds % 1000
+            cpu_time_in_seconds //= 1000
+            if cpu_time_in_seconds > 0:
+                if int(three_digits) < 100:
+                    three_digits = "0{0}".format(three_digits)
+                if int(three_digits) < 10:
+                    three_digits = "0{0}".format(three_digits)
+            cpu_time_human_readable = "{1} {0}".format(cpu_time_human_readable, three_digits)
+        cpu_time_human_readable = "{0} {1}".format(cpu_time_human_readable, _('s'))
+        cpu = cpu_time_human_readable
+
         mem = convert_memory(resource.memory, accuracy)
     else:
         wall = "%s %s" % (resource.wall_time, _('ms'))
diff --git a/bridge/users/utils.py b/bridge/users/utils.py
index 81f95eb..3f0a4b5 100644
--- a/bridge/users/utils.py
+++ b/bridge/users/utils.py
@@ -20,12 +20,14 @@ from django.db.models import Q
 from django.utils.translation import ugettext_lazy as _, string_concat
 from users.models import View

-DEF_NUMBER_OF_ELEMENTS = 18
+DEF_NUMBER_OF_ELEMENTS = 500

 JOB_TREE_VIEW = {
-    'columns': ['name', 'role', 'author', 'date', 'status', 'unsafe:total', 'problem:total', 'safe:total'],
+    'columns': ['name', 'finish', 'unsafe:bug', 'unsafe:false_positive',
+                'unsafe:unknown', 'unsafe:unassociated', 'unsafe:total',
+                'safe:total', 'problem:total'],
     # order: [up|down, title|date|start|finish]
-    'order': ['up', 'date'],
+    'order': ['up', 'finish'],

     # FILTERS:
     # title: [iexact|istartswith|icontains, <any text>]
@@ -50,7 +52,7 @@ JOB_TREE_VIEW = {
     # 'format': ['is', '1'],
     # 'priority': ['me', 'LOW'],
     # 'finish_date': ['is', '1', '2016'],
-    # 'hidden': ['confirmed_marks']
+    'hidden': ['confirmed_marks']
 }

 JOB_DATA_VIEW = {
@@ -59,6 +61,7 @@ JOB_DATA_VIEW = {
         'safes_attr_stat', 'unsafes_attr_stat', 'unknowns_attr_stat'
     ],
     # 'hidden': ['unknowns_nomark', 'unknowns_total', 'resource_total', 'confirmed_marks'],
+    'hidden': ['resource_total', 'confirmed_marks'],
     'attr_stat': ['Rule specification']

     # FILTERS:
diff --git a/core/core/vrp/et/error_trace.py b/core/core/vrp/et/error_trace.py
index 83b46af..3dce699 100644
--- a/core/core/vrp/et/error_trace.py
+++ b/core/core/vrp/et/error_trace.py
@@ -222,9 +222,10 @@ class ErrorTrace:
         return new_edge

     def remove_edge_and_target_node(self, edge):
+        # Do not fail with no reason!
         # Do not delete edge with a warning
-        if 'warn' in edge:
-            raise ValueError('Cannot delete edge with warning: {!r}'.format(edge['source']))
+        # if 'warn' in edge:
+        #    raise ValueError('Cannot delete edge with warning: {!r}'.format(edge['source']))

         source = edge['source node']
         target = edge['target node']
@@ -302,7 +303,7 @@ class ErrorTrace:

             self._logger.debug('Parse model comments from {!r}'.format(file))

-            with open(file, encoding='utf8') as fp:
+            with open(file, encoding='utf8', errors='ignore') as fp:
                 line = 0
                 for text in fp:
                     line += 1
@@ -328,16 +329,16 @@ class ErrorTrace:
                                 # Don't forget to increase counter.
                                 line += 1

-                                if kind in ('AUX_FUNC', 'AUX_FUNC_CALLBACK'):
+                                if kind in ('AUX_FUNC', 'AUX_FUNC_CALLBACK', 'MODEL_FUNC'):
                                     func_name = comment
                                 else:
                                     match = re.search(r'(ldv_\w+)', func_decl)
                                     if match:
                                         func_name = match.group(1)
-                                    else:
-                                        raise ValueError(
-                                            'Auxiliary/model function definition is not specified in {!r}'.format(
-                                                func_decl))
+                                    #else:
+                                    #    raise ValueError(
+                                    #        'Auxiliary/model function definition is not specified in {!r}'.format(
+                                    #            func_decl))

                                 # Try to get names for formal arguments (in form "type name") that is required for
                                 # removing auxiliary function calls.
