Под сервером будет пониматься отдельная машина, на которой производится подготовка задач и обработка результатов их решения. Сервер не подразумевается для решения задач.
Под узлом понимается отдельная машина, на которой решаются задачи.
Облако – сервер и множество узлов.

Требования к серверу:
 - Ubuntu 16.04;
 - java 1.8;
 - tomcat8;
 - git-2.7.4;
 - svn;
 - git-svn;
 - openssh-server.
Проверить выполнение требований на Ubuntu 16.04 можно командой:
sudo apt install openjdk-8-jdk openjdk-8-doc openjdk-8-source ant ant-optional ssh openssh-server git git-svn subversion tomcat8

Требования к узлам:
 - java 1.8;
 - openssh-server.


1. Предварительная настройка.

1.1. Изменение параметров запуска tomcat.
1.1.1. В файле /etc/default/tomcat8 необходимо:
 - раскомментировать параметр JAVA_HOME и прописать путь до java-1.8;
 - увеличить значение -Xmx128m в параметре JAVA_OPTS до -Xmx512m.
1.1.2. Настроить права:
sudo chown --recursive tomcat8:tomcat8 /usr/share/tomcat8/
sudo chown --recursive tomcat8:tomcat8 /var/lib/tomcat8/
1.1.3. Перезапустить tomcat командой:
sudo service tomcat8 restart

1.2. Настройка контрольных групп (необходимо выполнить как на сервере, так и на всех узлах).
Выполняется аналогично шагу 1.2 из документации (docs/readme.txt).

1.3. Настройка свопа (необходимо выполнить как на сервере, так и на всех узлах).
Выполняется аналогично шагу 1.3 из документации (docs/readme.txt).

1.4. Настройка соединения сервера с узлами.
1.4.1. На сервере сгенерировать ssh ключ:
ssh-keygen
Далее указать путь к файлу с ключом (например, /home/<user>/.ssh/cloud).
1.4.2. В файл ~/.ssh/config добавить для каждого узла (если файла нет, то его следует создать):
Host <имя узла - произвольное>
Hostname <адрес узла в сети>
User <пользователь, под которым сервер будет обращаться к узлу>
PubKeyAuthentication yes
IdentityFile <путь к ssh ключу (например, /home/<user>/.ssh/cloud)>
1.4.3. Для каждого узла выполнить:
ssh-copy-id -i /home/<user>/.ssh/cloud <имя узла>
При необходимости ввести пароль.


2. Установка (сервер).

2.1. Выкачать репозитории.
2.1.1. Web-сервер (стабильная ревизия 6075):
svn co https://svn.sosy-lab.org/software/verifiercloud/trunk verifiercloud
cd verifiercloud
svn up -r 6075
2.1.2. CPAchecker:
mkdir -p git/cpachecker
git clone -n -o origin https://svn.sosy-lab.org/git/software/cpachecker.git/ git/cpachecker
cd git/cpachecker
git svn init --prefix=origin/ -s https://svn.sosy-lab.org/software/cpachecker
git checkout -t origin/trunk
git svn fetch
cd ../..

2.2. Сборка:
ant clean && ant && ant jar-big war webclient-jar

2.3. Конфигурация.
2.3.1. Запустить сервер для создания инициализации конфигурационных файлов и завершить его через несколько секунд:
java -jar vcloud.jar master
2.3.2. В файле ~/.verifiercloud/master/WorkerInformation требуется добавить информацию о каждом узле:
<имя узла>:off
2.3.3. В файле ~/.verifiercloud/master/Config требуется изменить:
zip-storage-location = <произвольная директория, в которую будут помещаться промежуточные результаты>
max-file-size = 1000 MB
2.3.4. Развернуть сервер:
sudo cp vcloud.war /var/lib/tomcat8/webapps/
2.3.5. В файле /usr/share/tomcat8/.verifiercloud/vcloud/client/Config изменить:
master = <имя сервера>
2.3.6. В файле /usr/share/tomcat8/.verifiercloud/vcloud/client/WebClient_Config изменить:
url = http://<имя сервера>:<порт>/vcloud/webclient
gitRepositoryAutoFetch = true
gitBenchmarksRepositories =
gitBenchmarksUpdateTimer = 60
command = scripts/cpa.sh
allowedRevisionsAndBranches = *:14002-HEAD
defaultMaxPriority = URGENT
defaultMaxLimitations = (500min,64 GB,8)
try-less-memory = true
maxRunsPerRunCollection = 100000
maxGroupSubmissionTimeSpan = 02min
buildCommandTimeLimitation = 10min
buildCommandMemoryRequirementLimitation = 2 GB
buildCommandSchedulingPriority = URGENT
2.3.7. Добавить ссылку на репозиторий:
sudo ln -s ~/verifiercloud/git /var/lib/tomcat8/
sudo chown --recursive tomcat8:tomcat8 /var/lib/tomcat8/git
2.3.8. Добавить ссылки на собранную версию web-сервера:
./create_cloud_links.sh <verifiercloud_dir>


3. Использование.

3.1. Запуск сервера (из директории verifiercloud)
3.1.1. Запустить основной процесс:
java -jar vcloud.jar master
Если конфигурация ошибочна, то в логе появятся сообщения об ошибках.
Примечание: данный процесс может требовать большое количество памяти (несколько GB), кроме того, обработка результата (например, фильтрация трасс ошибок) может занимать на какое-то время все ядра процессора, поэтому параллельно решать задачи на сервере (то есть добавить сервер также в качестве узла) не рекомендуется.
После первого успешного запуска сервера необходимо сконфигурировать узлы.
Для этого на каждом узле в файле ~/.verifiercloud/worker/Config следует изменить:
master = <имя сервера>
ignored-users = <добавить пользователя, через которого сервер подключается к узлу>
После этого необходимо перезапустить основной процесс.
3.1.2. Перезагрузить tomcat:
sudo service tomcat8 restart
После этого web-сервер должен быть доступен по адресу:
<имя сервера>:8080/vcloud/webclient/master/info
Если конфигурация полностью корректна, то в таблице Connected Hosts появятся все узлы с состоянием HEALTHY.

3.2. Остановка сервера (рекомендуется выполнять время от времени):
3.2.1. Остановить основной процесс, созданный на предыдущем шаге.
3.2.2. Остановить tomcat:
sudo service tomcat8 stop
3.2.3. Очистить рабочую директорию и логи:
rm -rf /tmp/vcloud-*/ /tmp/tomcat8-tomcat8-tmp/ <zip-storage-location>
sudo rm -rf /var/lib/tomcat8/logs/* /var/lib/tomcat8/logfiles/*

3.3. Верификация.
Для верификации с использованием облака необходимо запустить сервер и изменить конфигурацию задания следующим образом:
- Launcher: scheduler = cloud;
- cloud: master = <имя сервера>;
- cloud: priority = <приоритет задания (IDLE < LOW < HIGH < URGENT)> - имеет смысл указывать, если решается одновременно несколько заданий;
После этого верификация запускается стандартной командой:
scripts/launcher.py --config <файлы с конфигурацией>
При этом задания будут решаться не на локальной машине, а в облаке (то есть на всех узлах).

Более подробно про установку и использование web-сервера можно почитать в его документации:
verifiercloud/README.md
verifiercloud/doc/DevSetupManual.README
